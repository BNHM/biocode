#!/usr/bin/perl -w
#
# biocode_photoupload
# March 2009
# JD
#

use lib "./";
# Be sure that we have CGI::UploadEasy version 1.00 or greater installed on the system
use CGI::UploadEasy;
use Data::Dumper;
use CGI qw(:standard);

&parse_form;
our $directory="/data/biocode/web/biocode_data/pictures/".$FORM{'Directory'};

my $msg="0";

`/bin/mkdir $directory`;
# 1. Upload Files 
eval {
    # NOTE (from the UploadEasy Site): No CGI object may be created before the CGI::UploadEasy object has been created, or else the upload will fail. 
    # Likewise, if you import method names from CGI.pm, be careful not to call any CGI functions before the creation 
    # of the CGI::UploadEasy object.
    my $ue = CGI::UploadEasy->new(-uploaddir => '/data/biocode/web/biocode_data/pictures/55');
    #my $ue = CGI::UploadEasy->new(-uploaddir => '/tmp/photos');

    my $info = $ue->fileinfo;
    my $cgi = $ue->cgiobject;
};
if ($@) {
   $msg.="Trouble loading files: ".$@;
 } 

# 2. Need to check for existince of directory and if not there, then create it
#my $query = new CGI;
#$directory="/data/biocode/web/biocode_data/pictures/".$query->param('projectID');
#our $directory=$query->param('projectID');
#print "start".$directory."end";
#our $directory="55";
#my @args = ('/bin/mv -f', '/tmp/photos/*', "\'".$directory."\'");
#my $mvresult = system(@args); 
#`/bin/mv -f /tmp/photos/* /data/biocode/web/biocode_data/pictures/$directory/`;

# 3. Print a success message if finished (and also trap errors to return those to)
# NOTE: printing a message here can be problematic in the multi-file upload example as i 
# i don't have a way of collecting messages during the event.  Probably better to write
# a second script to check the success of this process.
print "Content-type: text/html\n\n";
print $msg;

#print Dumper $info;
#print "start";
#print param('projectID');
#print "end";

#$DEBUG = 1;
#if($DEBUG) { print "Content-type: text/html\n\n"; }

sub parse_form {
   @pairs = split(/&/, $ENV{'QUERY_STRING'});
   foreach $pair (@pairs) {
      ($name, $value) = split(/=/, $pair);
      $value =~ tr/+/ /;
      $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
      # If they try to include server side includes, erase them, so they
      # arent a security risk if the html gets returned.  Another
      # security hole plugged up.
      $value =~ s/<!--(.|\n)*-->//g;
      $FORM{$name} = $value;
   }
}

